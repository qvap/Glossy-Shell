pragma ComponentBehavior: Bound

import QtQuick
import Quickshell
import qs.components
import qs.config
import qs.services
import qs
import "../../scripts/fuzzysearch.js" as Fuzzy

StyledListView {
    id: root

    required property string searchText
    required property real maskLength
    readonly property int itemHeight: 46

    spacing: Config.style.spacing.standart

    clip: true

    orientation: ListView.Vertical

    verticalLayoutDirection: ListView.BottomToTop

    highlightFollowsCurrentItem: true
    highlightMoveDuration: Config.animation.duration.small
    highlightMoveVelocity: -1 // use duration instead
    preferredHighlightBegin: 0
    preferredHighlightEnd: root.height * (1 - maskLength)
    highlightRangeMode: ListView.ApplyRange

    footer: Item {
        width: root.width
        height: root.itemHeight - root.spacing
    }

    displaced: Transition {
        BaseAnimation {
            property: "y"
            easing.type: Easing.OutCubic
            duration: Config.animation.duration.normal
        }
    }

    addDisplaced: Transition {
        BaseAnimation {
            property: "y"
            easing.type: Easing.OutCubic
            duration: Config.animation.duration.normal
        }
    }

    remove: Transition {
        BaseAnimation {
            properties: "opacity,scale"
            to: 0
            easing.type: Easing.OutCubic
            duration: Config.animation.duration.normal
        }
    }

    add: Transition {
        BaseAnimation {
            properties: "opacity,scale"
            to: 1
            easing.type: Easing.OutCubic
            duration: Config.animation.duration.normal
        }
    }

    model: ScriptModel {
        values: getSearchApps(searchText)
        onValuesChanged: root.currentIndex = 0
    }

    delegate: AppItem {
        onItemClicked: itemIndex => {
            /* this was generated by ai and
            /* and this solution really sucks
            /*but if it works then idc */
            root.highlightFollowsCurrentItem = false;
            root.highlightRangeMode = ListView.NoHighlightRange;
            root.currentIndex = itemIndex;
            Qt.callLater(() => {
                root.highlightFollowsCurrentItem = true;
                root.highlightRangeMode = ListView.ApplyRange;
            });
        }
        implicitHeight: root.itemHeight
    }

    function getSearchApps(searchText): list<var> {
        return (DesktopEntries.applications.values.filter(a => Fuzzy.fuzzy_search(a.name, searchText))).sort((a, b) => a.name.localeCompare(b.name));
    }

    function execute() {
        if (root.currentItem) {
            currentItem.execute();
        }
    }

    layer.enabled: true
    layer.effect: OpacityMask {
        maskSource: maskRect
    }

    Rectangle {
        id: maskRect

        layer.enabled: true
        visible: false

        anchors {
            fill: parent
        }
        gradient: Gradient {
            GradientStop {
                position: 0.0
                color: Qt.rgba(0, 0, 0, 0)
            }
            GradientStop {
                position: root.maskLength
                color: Qt.rgba(0, 0, 0, 1)
            }
        }
    }
}
